// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using sql_ledger.Data;

#nullable disable

namespace sqlledger.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240307084311_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.HasSequence<int>("address_id");

            modelBuilder.HasSequence<int>("archive_id");

            modelBuilder.HasSequence<int>("assembly_id");

            modelBuilder.HasSequence<int>("contact_id");

            modelBuilder.HasSequence<int>("inventory_id");

            modelBuilder.HasSequence<int>("invoice_id");

            modelBuilder.HasSequence<int>("jcitems_id");

            modelBuilder.HasSequence<int>("orderitems_id");

            modelBuilder.HasSequence<int>("public_id")
                .StartsAt(10000L);

            modelBuilder.HasSequence<int>("reference_id");

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("sql_ledger.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("sql_ledger.Data.Model.Acc_trans", b =>
                {
                    b.Property<decimal?>("Amount")
                        .HasPrecision(28, 6)
                        .HasColumnType("decimal(28,6)")
                        .HasColumnName("amount");

                    b.Property<bool?>("Approved")
                        .HasColumnType("bit")
                        .HasColumnName("approved");

                    b.Property<int?>("ChartId")
                        .HasColumnType("int")
                        .HasColumnName("chart_id");

                    b.Property<DateTime?>("Cleared")
                        .HasColumnType("datetime2")
                        .HasColumnName("cleared");

                    b.Property<bool?>("FxTransaction")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("fx_transaction");

                    b.Property<int?>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Memo")
                        .HasColumnType("nvarchar(MAX)")
                        .HasColumnName("memo");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("int")
                        .HasColumnName("project_id");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasColumnName("row_version");

                    b.Property<string>("Source")
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("source");

                    b.Property<DateTime?>("TransDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("transdate");

                    b.Property<int?>("TransId")
                        .HasColumnType("int")
                        .HasColumnName("trans_id");

                    b.Property<int?>("VrId")
                        .HasColumnType("int")
                        .HasColumnName("vr_id");

                    b.HasIndex("ChartId")
                        .HasDatabaseName("acc_trans_chart_id_key");

                    b.HasIndex("Source")
                        .HasDatabaseName("acc_trans_source_key");

                    b.HasIndex("TransDate")
                        .HasDatabaseName("acc_trans_transdate_key");

                    b.HasIndex("TransId")
                        .HasDatabaseName("acc_trans_trans_id_key");

                    b.ToTable("acc_trans", (string)null);
                });

            modelBuilder.Entity("sql_ledger.Data.Model.AcsRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasDefaultValueSql("NEXT VALUE FOR public_id");

                    b.Property<string>("Acs")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("acs");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(MAX)")
                        .HasColumnName("description");

                    b.Property<short?>("Rn")
                        .HasColumnType("smallint")
                        .HasColumnName("rn");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasColumnName("row_version");

                    b.HasKey("Id")
                        .HasName("acsrole_pkey");

                    b.ToTable("acsrole", (string)null);
                });

            modelBuilder.Entity("sql_ledger.Data.Model.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasDefaultValueSql("NEXT VALUE FOR address_id");

                    b.Property<string>("Address1")
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)")
                        .HasColumnName("address1");

                    b.Property<string>("Address2")
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)")
                        .HasColumnName("address2");

                    b.Property<string>("City")
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)")
                        .HasColumnName("city");

                    b.Property<string>("Country")
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)")
                        .HasColumnName("country");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasColumnName("row_version");

                    b.Property<string>("State")
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)")
                        .HasColumnName("state");

                    b.Property<int?>("TransId")
                        .HasColumnType("int")
                        .HasColumnName("trans_id");

                    b.Property<string>("Zipcode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("zipcode");

                    b.HasKey("Id")
                        .HasName("address_pkey");

                    b.ToTable("address", (string)null);
                });

            modelBuilder.Entity("sql_ledger.Data.Model.Ap", b =>
                {
                    b.Property<decimal?>("Amount")
                        .HasPrecision(28, 6)
                        .HasColumnType("decimal(28,6)")
                        .HasColumnName("amount");

                    b.Property<bool?>("Approved")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("approved");

                    b.Property<int?>("BankId")
                        .HasColumnType("int")
                        .HasColumnName("bank_id");

                    b.Property<float?>("CashDiscount")
                        .HasColumnType("real")
                        .HasColumnName("cashdiscount");

                    b.Property<string>("Currency")
                        .HasMaxLength(3)
                        .HasColumnType("char(3)")
                        .HasColumnName("curr");

                    b.Property<DateTime?>("DatePaid")
                        .HasColumnType("datetime2")
                        .HasColumnName("datepaid");

                    b.Property<string>("Dcn")
                        .HasColumnType("nvarchar(MAX)")
                        .HasColumnName("dcn");

                    b.Property<int?>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("department_id");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(MAX)")
                        .HasColumnName("description");

                    b.Property<short?>("DiscountTerms")
                        .HasColumnType("smallint")
                        .HasColumnName("discountterms");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("duedate");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int")
                        .HasColumnName("employee_id");

                    b.Property<double?>("ExchangeRate")
                        .HasColumnType("float")
                        .HasColumnName("exchangerate");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasDefaultValueSql("NEXT VALUE FOR public_id");

                    b.Property<string>("IntNotes")
                        .HasColumnType("nvarchar(MAX)")
                        .HasColumnName("intnotes");

                    b.Property<string>("InvNumber")
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("invnumber");

                    b.Property<bool>("Invoice")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("invoice");

                    b.Property<string>("LanguageCode")
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)")
                        .HasColumnName("language_code");

                    b.Property<decimal?>("NetAmount")
                        .HasPrecision(28, 6)
                        .HasColumnType("decimal(28,6)")
                        .HasColumnName("netamount");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(MAX)")
                        .HasColumnName("notes");

                    b.Property<bool>("OnHold")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("onhold");

                    b.Property<string>("OrdNumber")
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("ordnumber");

                    b.Property<decimal?>("Paid")
                        .HasPrecision(28, 6)
                        .HasColumnType("decimal(28,6)")
                        .HasColumnName("paid");

                    b.Property<int?>("PaymentMethodId")
                        .HasColumnType("int")
                        .HasColumnName("paymentmethod_id");

                    b.Property<string>("PoNumber")
                        .HasColumnType("nvarchar(MAX)")
                        .HasColumnName("ponumber");

                    b.Property<string>("QuoNumber")
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("quonumber");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasColumnName("row_version");

                    b.Property<string>("ShipVia")
                        .HasColumnType("nvarchar(MAX)")
                        .HasColumnName("shipvia");

                    b.Property<string>("ShippingPoint")
                        .HasColumnType("nvarchar(MAX)")
                        .HasColumnName("shippingpoint");

                    b.Property<bool>("TaxIncluded")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("taxincluded");

                    b.Property<short>("Terms")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)0)
                        .HasColumnName("terms");

                    b.Property<string>("Till")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("till");

                    b.Property<DateTime>("TransDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("transdate")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int?>("VendorId")
                        .HasColumnType("int")
                        .HasColumnName("vendor_id");

                    b.Property<int?>("WarehouseId")
                        .HasColumnType("int")
                        .HasColumnName("warehouse_id");

                    b.Property<string>("WayBill")
                        .HasColumnType("nvarchar(MAX)")
                        .HasColumnName("waybill");

                    b.HasIndex("EmployeeId")
                        .HasDatabaseName("ap_employee_id_key");

                    b.HasIndex("Id")
                        .HasDatabaseName("ap_id_key");

                    b.HasIndex("InvNumber")
                        .HasDatabaseName("ap_invnumber_key");

                    b.HasIndex("OrdNumber")
                        .HasDatabaseName("ap_ordnumber_key");

                    b.HasIndex("QuoNumber")
                        .HasDatabaseName("ap_quonumber_key");

                    b.HasIndex("TransDate")
                        .HasDatabaseName("ap_transdate_key");

                    b.HasIndex("VendorId")
                        .HasDatabaseName("ap_vendor_id_key");

                    b.ToTable("ap", (string)null);
                });

            modelBuilder.Entity("sql_ledger.Data.Model.Ar", b =>
                {
                    b.Property<decimal?>("Amount")
                        .HasPrecision(28, 6)
                        .HasColumnType("decimal(28,6)")
                        .HasColumnName("amount");

                    b.Property<bool?>("Approved")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("approved");

                    b.Property<int?>("BankId")
                        .HasColumnType("int")
                        .HasColumnName("bank_id");

                    b.Property<float?>("CashDiscount")
                        .HasColumnType("real")
                        .HasColumnName("cashdiscount");

                    b.Property<string>("Currency")
                        .HasMaxLength(3)
                        .HasColumnType("char(3)")
                        .HasColumnName("curr");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("customer_id");

                    b.Property<DateTime?>("DatePaid")
                        .HasColumnType("datetime2")
                        .HasColumnName("datepaid");

                    b.Property<string>("Dcn")
                        .HasColumnType("nvarchar(MAX)")
                        .HasColumnName("dcn");

                    b.Property<int?>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("department_id");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(MAX)")
                        .HasColumnName("description");

                    b.Property<short?>("DiscountTerms")
                        .HasColumnType("smallint")
                        .HasColumnName("discountterms");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("duedate");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int")
                        .HasColumnName("employee_id");

                    b.Property<double?>("ExchangeRate")
                        .HasColumnType("float")
                        .HasColumnName("exchangerate");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasDefaultValueSql("NEXT VALUE FOR public_id");

                    b.Property<string>("IntNotes")
                        .HasColumnType("nvarchar(MAX)")
                        .HasColumnName("intnotes");

                    b.Property<string>("InvNumber")
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("invnumber");

                    b.Property<bool>("Invoice")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("invoice");

                    b.Property<string>("LanguageCode")
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)")
                        .HasColumnName("language_code");

                    b.Property<decimal?>("NetAmount")
                        .HasPrecision(28, 6)
                        .HasColumnType("decimal(28,6)")
                        .HasColumnName("netamount");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(MAX)")
                        .HasColumnName("notes");

                    b.Property<bool?>("OnHold")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("onhold");

                    b.Property<string>("OrdNumber")
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("ordnumber");

                    b.Property<decimal?>("Paid")
                        .HasPrecision(28, 6)
                        .HasColumnType("decimal(28,6)")
                        .HasColumnName("paid");

                    b.Property<int?>("PaymentMethodId")
                        .HasColumnType("int")
                        .HasColumnName("paymentmethod_id");

                    b.Property<string>("PoNumber")
                        .HasColumnType("nvarchar(MAX)")
                        .HasColumnName("ponumber");

                    b.Property<string>("QuoNumber")
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("quonumber");

                    b.Property<byte[]>("RowVersion")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("ShipVia")
                        .HasColumnType("nvarchar(MAX)")
                        .HasColumnName("shipvia");

                    b.Property<string>("ShippingPoint")
                        .HasColumnType("nvarchar(MAX)")
                        .HasColumnName("shippingpoint");

                    b.Property<bool?>("TaxIncluded")
                        .HasColumnType("bit")
                        .HasColumnName("taxincluded");

                    b.Property<short>("Terms")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)0)
                        .HasColumnName("terms");

                    b.Property<string>("Till")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("till");

                    b.Property<DateTime>("TransDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("transdate")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int?>("WarehouseId")
                        .HasColumnType("int")
                        .HasColumnName("warehouse_id");

                    b.Property<string>("WayBill")
                        .HasColumnType("nvarchar(MAX)")
                        .HasColumnName("waybill");

                    b.HasIndex("CustomerId")
                        .HasDatabaseName("ar_customer_id_key");

                    b.HasIndex("EmployeeId")
                        .HasDatabaseName("ar_employee_id_key");

                    b.HasIndex("Id")
                        .HasDatabaseName("ar_id_key");

                    b.HasIndex("InvNumber")
                        .HasDatabaseName("ar_invnumber_key");

                    b.HasIndex("OrdNumber")
                        .HasDatabaseName("ar_ordnumber_key");

                    b.HasIndex("QuoNumber")
                        .HasDatabaseName("ar_quonumber_key");

                    b.HasIndex("TransDate")
                        .HasDatabaseName("ar_transdate_key");

                    b.ToTable("ar", (string)null);
                });

            modelBuilder.Entity("sql_ledger.Data.Model.Archive", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasDefaultValueSql("NEXT VALUE FOR archive_id");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(MAX)")
                        .HasColumnName("filename");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasColumnName("row_version");

                    b.HasKey("Id")
                        .HasName("archive_pkey");

                    b.ToTable("archive", (string)null);
                });

            modelBuilder.Entity("sql_ledger.Data.Model.ArchiveData", b =>
                {
                    b.Property<int?>("ArchiveId")
                        .IsRequired()
                        .HasColumnType("int")
                        .HasColumnName("archive_id");

                    b.Property<string>("Bt")
                        .HasColumnType("nvarchar(MAX)")
                        .HasColumnName("bt");

                    b.Property<int?>("Rn")
                        .HasColumnType("int")
                        .HasColumnName("rn");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasColumnName("row_version");

                    b.HasIndex("ArchiveId");

                    b.ToTable("archivedata", (string)null);
                });

            modelBuilder.Entity("sql_ledger.Data.Model.Assembly", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasDefaultValueSql("NEXT VALUE FOR assembly_id");

                    b.Property<bool?>("Adj")
                        .HasColumnType("bit")
                        .HasColumnName("adj");

                    b.Property<int?>("Aid")
                        .HasColumnType("int")
                        .HasColumnName("aid");

                    b.Property<bool?>("Bom")
                        .HasColumnType("bit")
                        .HasColumnName("bom");

                    b.Property<int?>("PartsId")
                        .HasColumnType("int")
                        .HasColumnName("parts_id");

                    b.Property<decimal?>("Qty")
                        .HasPrecision(28, 6)
                        .HasColumnType("decimal(28,6)")
                        .HasColumnName("qty");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasColumnName("row_version");

                    b.HasKey("Id")
                        .HasName("assembly_id_key");

                    b.ToTable("assembly", (string)null);
                });

            modelBuilder.Entity("sql_ledger.Data.Model.AuditTrail", b =>
                {
                    b.Property<string>("Action")
                        .HasColumnType("nvarchar(MAX)")
                        .HasColumnName("action");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int")
                        .HasColumnName("employee_id");

                    b.Property<string>("FormName")
                        .HasColumnType("nvarchar(MAX)")
                        .HasColumnName("formname");

                    b.Property<string>("Reference")
                        .HasColumnType("nvarchar(MAX)")
                        .HasColumnName("reference");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasColumnName("row_version");

                    b.Property<string>("TableName")
                        .HasColumnType("nvarchar(MAX)")
                        .HasColumnName("tablename");

                    b.Property<DateTime>("TransDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("transdate")
                        .HasDefaultValueSql("CAST(GETUTCDATE() AS Date)");

                    b.Property<int?>("TransId")
                        .HasColumnType("int")
                        .HasColumnName("trans_id");

                    b.HasIndex("TransId")
                        .HasDatabaseName("audittrail_trans_id_key");

                    b.ToTable("audittrail", (string)null);
                });

            modelBuilder.Entity("sql_ledger.Data.Model.Bank", b =>
                {
                    b.Property<int>("AddressId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("address_id")
                        .HasDefaultValueSql("NEXT VALUE FOR address_id");

                    b.Property<string>("Bic")
                        .HasColumnType("nvarchar(11)")
                        .HasColumnName("bic");

                    b.Property<string>("ClearingNumber")
                        .HasColumnType("nvarchar(MAX)")
                        .HasColumnName("clearingnumber");

                    b.Property<string>("Dcn")
                        .HasColumnType("nvarchar(MAX)")
                        .HasColumnName("dcn");

                    b.Property<string>("Iban")
                        .HasColumnType("nvarchar(34)")
                        .HasColumnName("iban");

                    b.Property<int?>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("MemberNumber")
                        .HasColumnType("nvarchar(MAX)")
                        .HasColumnName("membernumber");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(64)")
                        .HasColumnName("name");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasColumnName("row_version");

                    b.Property<string>("Rvc")
                        .HasColumnType("nvarchar(MAX)")
                        .HasColumnName("rvc");

                    b.ToTable("bank", (string)null);
                });

            modelBuilder.Entity("sql_ledger.Data.Model.Br", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasDefaultValueSql("NEXT VALUE FOR public_id");

                    b.Property<decimal?>("Amount")
                        .HasPrecision(28, 6)
                        .HasColumnType("decimal(28,6)")
                        .HasColumnName("amount");

                    b.Property<DateTime?>("ApprDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("apprdate");

                    b.Property<string>("Batch")
                        .HasColumnType("nvarchar(MAX)")
                        .HasColumnName("batch");

                    b.Property<string>("BatchNumber")
                        .HasColumnType("nvarchar(MAX)")
                        .HasColumnName("batchnumber");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(MAX)")
                        .HasColumnName("description");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int")
                        .HasColumnName("employee_id");

                    b.Property<int?>("ManagerId")
                        .HasColumnType("int")
                        .HasColumnName("managerid");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasColumnName("row_version");

                    b.Property<DateTime>("TransDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("transdate")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.HasKey("Id")
                        .HasName("br_pkey");

                    b.ToTable("br", (string)null);
                });

            modelBuilder.Entity("sql_ledger.Data.Model.Business", b =>
                {
                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(MAX)")
                        .HasColumnName("description");

                    b.Property<float?>("Discount")
                        .HasColumnType("real")
                        .HasColumnName("discount");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasDefaultValueSql("NEXT VALUE FOR public_id");

                    b.Property<int?>("Rn")
                        .HasColumnType("int")
                        .HasColumnName("rn");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasColumnName("row_version");

                    b.ToTable("business", (string)null);
                });

            modelBuilder.Entity("sql_ledger.Data.Model.Cargo", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int?>("TransId")
                        .HasColumnType("int")
                        .HasColumnName("trans_id");

                    b.Property<decimal?>("GrossWeight")
                        .HasPrecision(28, 6)
                        .HasColumnType("decimal(28,6)")
                        .HasColumnName("grossweight");

                    b.Property<decimal?>("NetWeight")
                        .HasPrecision(28, 6)
                        .HasColumnType("decimal(28,6)")
                        .HasColumnName("netweight");

                    b.Property<string>("Package")
                        .HasColumnType("nvarchar(MAX)")
                        .HasColumnName("package");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasColumnName("row_version");

                    b.Property<decimal?>("Volume")
                        .HasPrecision(28, 6)
                        .HasColumnType("decimal(28,6)")
                        .HasColumnName("volume");

                    b.HasKey("Id", "TransId")
                        .HasName("cargo_id_key");

                    b.ToTable("cargo", (string)null);
                });

            modelBuilder.Entity("sql_ledger.Data.Model.Chart", b =>
                {
                    b.Property<string>("AccNo")
                        .IsRequired()
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("accno");

                    b.Property<string>("Category")
                        .IsRequired()
                        .HasColumnType("char")
                        .HasColumnName("category");

                    b.Property<string>("ChartType")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char")
                        .HasDefaultValue("A")
                        .HasColumnName("charttype");

                    b.Property<bool?>("Closed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("closed");

                    b.Property<bool?>("Contra")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("contra");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(MAX)")
                        .HasColumnName("description");

                    b.Property<string>("GifiAccno")
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("gifi_accno");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasDefaultValueSql("NEXT VALUE FOR public_id");

                    b.Property<string>("Link")
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("link");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasColumnName("row_version");

                    b.HasIndex("AccNo")
                        .IsUnique()
                        .HasDatabaseName("chart_accno_key");

                    b.HasIndex("Category")
                        .HasDatabaseName("chart_category_key");

                    b.HasIndex("GifiAccno")
                        .HasDatabaseName("chart_gifi_accno_key");

                    b.HasIndex("Id")
                        .HasDatabaseName("chart_id_key");

                    b.HasIndex("Link")
                        .HasDatabaseName("chart_link_key");

                    b.ToTable("chart", (string)null);
                });

            modelBuilder.Entity("sql_ledger.Data.Model.Contact", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasDefaultValueSql("NEXT VALUE FOR contact_id");

                    b.Property<string>("ContactTitle")
                        .HasColumnType("nvarchar(32)")
                        .HasColumnName("contacttitle");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(MAX)")
                        .HasColumnName("email");

                    b.Property<string>("Fax")
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("fax");

                    b.Property<string>("FirstName")
                        .HasColumnType("nvarchar(32)")
                        .HasColumnName("firstname");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char")
                        .HasDefaultValue("M")
                        .HasColumnName("gender");

                    b.Property<string>("LastName")
                        .HasColumnType("nvarchar(32)")
                        .HasColumnName("lastname");

                    b.Property<string>("Mobile")
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("mobile");

                    b.Property<string>("Occupation")
                        .HasColumnType("nvarchar(32)")
                        .HasColumnName("occupation");

                    b.Property<int?>("ParentId")
                        .HasColumnType("int")
                        .HasColumnName("parent_id");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("phone");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasColumnName("row_version");

                    b.Property<string>("Salutation")
                        .HasColumnType("nvarchar(32)")
                        .HasColumnName("salutation");

                    b.Property<int>("TransId")
                        .HasColumnType("int")
                        .HasColumnName("trans_id");

                    b.Property<string>("TypeOfContact")
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("typeofcontact");

                    b.HasKey("Id")
                        .HasName("contact_pkey");

                    b.ToTable("contact", (string)null);
                });

            modelBuilder.Entity("sql_ledger.Data.Model.Currency", b =>
                {
                    b.Property<string>("Curr")
                        .HasMaxLength(3)
                        .HasColumnType("char(3)")
                        .HasColumnName("curr");

                    b.Property<short?>("Prec")
                        .HasColumnType("smallint")
                        .HasColumnName("prec");

                    b.Property<short?>("Rn")
                        .HasColumnType("smallint")
                        .HasColumnName("rn");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasColumnName("row_version");

                    b.HasKey("Curr")
                        .HasName("curr_pkey");

                    b.ToTable("curr", (string)null);
                });

            modelBuilder.Entity("sql_ledger.Data.Model.Customer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasDefaultValueSql("NEXT VALUE FOR public_id");

                    b.Property<int?>("ArapAccNoId")
                        .HasColumnType("int")
                        .HasColumnName("arap_accno_id");

                    b.Property<string>("Bcc")
                        .HasColumnType("nvarchar(MAX)")
                        .HasColumnName("bcc");

                    b.Property<int?>("BusinessId")
                        .HasColumnType("int")
                        .HasColumnName("business_id");

                    b.Property<float?>("CashDiscount")
                        .HasColumnType("real")
                        .HasColumnName("cashdiscount");

                    b.Property<string>("Cc")
                        .HasColumnType("nvarchar(MAX)")
                        .HasColumnName("cc");

                    b.Property<string>("Contact")
                        .HasColumnType("nvarchar(64)")
                        .HasColumnName("contact");

                    b.Property<decimal>("CreditLimit")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(28, 6)
                        .HasColumnType("decimal(28,6)")
                        .HasDefaultValue(0m)
                        .HasColumnName("creditlimit");

                    b.Property<string>("Currency")
                        .HasMaxLength(3)
                        .HasColumnType("char(3)")
                        .HasColumnName("curr");

                    b.Property<string>("CustomerNumber")
                        .HasColumnType("nvarchar(32)")
                        .HasColumnName("customernumber");

                    b.Property<float?>("Discount")
                        .HasColumnType("real")
                        .HasColumnName("discount");

                    b.Property<int?>("DiscountAccNoId")
                        .HasColumnType("int")
                        .HasColumnName("discount_accno_id");

                    b.Property<short?>("DiscountTerms")
                        .HasColumnType("smallint")
                        .HasColumnName("discountterms");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(MAX)")
                        .HasColumnName("email");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int")
                        .HasColumnName("employee_id");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("enddate");

                    b.Property<string>("Fax")
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("fax");

                    b.Property<string>("LanguageCode")
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)")
                        .HasColumnName("language_code");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(64)")
                        .HasColumnName("name");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(MAX)")
                        .HasColumnName("notes");

                    b.Property<int?>("PaymentAccNoId")
                        .HasColumnType("int")
                        .HasColumnName("payment_accno_id");

                    b.Property<int?>("PaymentMethodId")
                        .HasColumnType("int")
                        .HasColumnName("paymentmethod_id");

                    b.Property<string>("Phone")
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("phone");

                    b.Property<int?>("PrepaymentAccnoId")
                        .HasColumnType("int")
                        .HasColumnName("prepayment_accno_id");

                    b.Property<int?>("PriceGroupId")
                        .HasColumnType("int")
                        .HasColumnName("pricegroup_id");

                    b.Property<bool?>("RemittanceVoucher")
                        .HasColumnType("bit")
                        .HasColumnName("remittancevoucher");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasColumnName("row_version");

                    b.Property<string>("SicCode")
                        .HasColumnType("nvarchar(6)")
                        .HasColumnName("sic_code");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("startdate");

                    b.Property<bool>("TaxIncluded")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("taxincluded");

                    b.Property<string>("TaxNumber")
                        .HasColumnType("nvarchar(32)")
                        .HasColumnName("taxnumber");

                    b.Property<short>("Terms")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)0)
                        .HasColumnName("terms");

                    b.Property<decimal?>("Threshold")
                        .HasPrecision(28, 6)
                        .HasColumnType("decimal(28,6)")
                        .HasColumnName("threshold");

                    b.HasKey("Id")
                        .HasName("customer_pkey");

                    b.HasIndex("Contact")
                        .HasDatabaseName("customer_contact_key");

                    b.HasIndex("CustomerNumber")
                        .HasDatabaseName("customer_number_key");

                    b.HasIndex("Name")
                        .HasDatabaseName("customer_name_key");

                    b.ToTable("customer", (string)null);
                });

            modelBuilder.Entity("sql_ledger.Data.Model.CustomerTax", b =>
                {
                    b.Property<int>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("customer_id");

                    b.Property<int>("ChartId")
                        .HasColumnType("int")
                        .HasColumnName("chart_id");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasColumnName("row_version");

                    b.HasKey("CustomerId", "ChartId")
                        .HasName("customer_tax_pkey");

                    b.HasIndex("ChartId");

                    b.ToTable("customertax", (string)null);
                });

            modelBuilder.Entity("sql_ledger.Data.Model.Deduction", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasDefaultValueSql("NEXT VALUE FOR public_id");

                    b.Property<bool?>("AgeDob")
                        .HasColumnType("bit")
                        .HasColumnName("agedob");

                    b.Property<int?>("BaseDon")
                        .HasColumnType("int")
                        .HasColumnName("basedon");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(MAX)")
                        .HasColumnName("description");

                    b.Property<int?>("EmployeeAccnoId")
                        .HasColumnType("int")
                        .HasColumnName("employee_accno_id");

                    b.Property<decimal?>("EmployeePays")
                        .HasPrecision(28, 6)
                        .HasColumnType("decimal(28,6)")
                        .HasColumnName("employeepays");

                    b.Property<int?>("EmployerAccnoId")
                        .HasColumnType("int")
                        .HasColumnName("employer_accno_id");

                    b.Property<decimal?>("EmployerPays")
                        .HasPrecision(28, 6)
                        .HasColumnType("decimal(28,6)")
                        .HasColumnName("employerpays");

                    b.Property<short?>("FromAge")
                        .HasColumnType("smallint")
                        .HasColumnName("fromage");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasColumnName("row_version");

                    b.Property<short?>("ToAge")
                        .HasColumnType("smallint")
                        .HasColumnName("toage");

                    b.HasKey("Id")
                        .HasName("deduction_pkey");

                    b.ToTable("deduction", (string)null);
                });

            modelBuilder.Entity("sql_ledger.Data.Model.DeductionDeductionRate", b =>
                {
                    b.Property<int>("TransId")
                        .HasColumnType("int")
                        .HasColumnName("trans_id");

                    b.Property<int>("DeductionId")
                        .HasColumnType("int")
                        .HasColumnName("deduction_id");

                    b.Property<float?>("Percent")
                        .HasColumnType("real")
                        .HasColumnName("percent");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasColumnName("row_version");

                    b.Property<bool?>("WithHolding")
                        .HasColumnType("bit")
                        .HasColumnName("withholding");

                    b.HasKey("TransId", "DeductionId")
                        .HasName("deduct_pkey");

                    b.HasIndex("DeductionId");

                    b.ToTable("deduct", (string)null);
                });

            modelBuilder.Entity("sql_ledger.Data.Model.DeductionRate", b =>
                {
                    b.Property<int>("TransId")
                        .HasColumnType("int")
                        .HasColumnName("trans_id");

                    b.Property<decimal?>("Above")
                        .HasPrecision(28, 6)
                        .HasColumnType("decimal(28,6)")
                        .HasColumnName("above");

                    b.Property<decimal?>("Amount")
                        .HasPrecision(28, 6)
                        .HasColumnType("decimal(28,6)")
                        .HasColumnName("amount");

                    b.Property<decimal?>("Below")
                        .HasPrecision(28, 6)
                        .HasColumnType("decimal(28,6)")
                        .HasColumnName("below");

                    b.Property<decimal?>("Rate")
                        .HasPrecision(28, 6)
                        .HasColumnType("decimal(28,6)")
                        .HasColumnName("rate");

                    b.Property<short?>("Rn")
                        .HasColumnType("smallint")
                        .HasColumnName("rn");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasColumnName("row_version");

                    b.HasKey("TransId")
                        .HasName("deductionrate_pkey");

                    b.ToTable("deductionrate", (string)null);
                });

            modelBuilder.Entity("sql_ledger.Data.Model.Default", b =>
                {
                    b.Property<string>("FldName")
                        .IsRequired()
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("fldname");

                    b.Property<string>("FldValue")
                        .HasColumnType("nvarchar(MAX)")
                        .HasColumnName("fldvalue");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasColumnName("row_version");

                    b.ToTable("defaults", (string)null);
                });

            modelBuilder.Entity("sql_ledger.Data.Model.Department", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasDefaultValueSql("NEXT VALUE FOR public_id");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(MAX)")
                        .HasColumnName("description");

                    b.Property<int?>("Rn")
                        .HasColumnType("int")
                        .HasColumnName("rn");

                    b.Property<string>("Role")
                        .IsRequired()
                        .ValueGeneratedOnAdd()
                        .HasColumnType("char")
                        .HasDefaultValue("P")
                        .HasColumnName("role");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasColumnName("row_version");

                    b.HasKey("Id")
                        .HasName("department_id_key");

                    b.ToTable("department", (string)null);
                });

            modelBuilder.Entity("sql_ledger.Data.Model.DptTrans", b =>
                {
                    b.Property<int>("DepartmentId")
                        .HasColumnType("int")
                        .HasColumnName("department_id");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasColumnName("row_version");

                    b.Property<int>("TransId")
                        .HasColumnType("int")
                        .HasColumnName("trans_id");

                    b.HasIndex("DepartmentId")
                        .HasDatabaseName("dpt_trans_department_id_key");

                    b.ToTable("dpt_trans", (string)null);
                });

            modelBuilder.Entity("sql_ledger.Data.Model.Employee", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasDefaultValueSql("NEXT VALUE FOR public_id");

                    b.Property<string>("Acs")
                        .HasColumnType("nvarchar(MAX)")
                        .HasColumnName("acs");

                    b.Property<int?>("AcsRoleId")
                        .HasColumnType("int")
                        .HasColumnName("acsrole_id");

                    b.Property<int?>("ApId")
                        .HasColumnType("int")
                        .HasColumnName("apid");

                    b.Property<DateTime?>("Dob")
                        .HasColumnType("datetime2")
                        .HasColumnName("dob");

                    b.Property<string>("Email")
                        .HasColumnType("nvarchar(MAX)")
                        .HasColumnName("email");

                    b.Property<string>("EmployeeNumber")
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("employeenumber");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("enddate");

                    b.Property<string>("HomeMobile")
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("homemobile");

                    b.Property<string>("HomePhone")
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("homephone");

                    b.Property<string>("Login")
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("login");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(64)")
                        .HasColumnName("name");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(MAX)")
                        .HasColumnName("notes");

                    b.Property<short>("PayPeriod")
                        .HasColumnType("smallint")
                        .HasColumnName("payperiod");

                    b.Property<int?>("PaymentId")
                        .HasColumnType("int")
                        .HasColumnName("paymentid");

                    b.Property<int?>("PaymentMethodId")
                        .HasColumnType("int")
                        .HasColumnName("paymentmethod_id");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasColumnName("row_version");

                    b.Property<bool>("Sales")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("sales");

                    b.Property<string>("Ssn")
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("ssn");

                    b.Property<DateTime>("StartDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("startdate")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<string>("WorkFax")
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("workfax");

                    b.Property<string>("WorkMobile")
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("workmobile");

                    b.Property<string>("WorkPhone")
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("workphone");

                    b.HasKey("Id")
                        .HasName("employee_pkey");

                    b.HasIndex("Login")
                        .IsUnique()
                        .HasDatabaseName("employee_login_key")
                        .HasFilter("[login] IS NOT NULL");

                    b.HasIndex("Name")
                        .HasDatabaseName("employee_name_key");

                    b.ToTable("employee", (string)null);
                });

            modelBuilder.Entity("sql_ledger.Data.Model.EmployeeDeduction", b =>
                {
                    b.Property<int?>("DeductionId")
                        .HasColumnType("int")
                        .HasColumnName("deduction_id");

                    b.Property<int>("EmployeeId")
                        .HasColumnType("int")
                        .HasColumnName("employee_id");

                    b.Property<decimal?>("Exempt")
                        .HasPrecision(28, 6)
                        .HasColumnType("decimal(28,6)")
                        .HasColumnName("exempt");

                    b.Property<int?>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<decimal?>("Maximum")
                        .HasPrecision(28, 6)
                        .HasColumnType("decimal(28,6)")
                        .HasColumnName("maximum");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasColumnName("row_version");

                    b.HasIndex("EmployeeId");

                    b.ToTable("employeededuction", (string)null);
                });

            modelBuilder.Entity("sql_ledger.Data.Model.EmployeeWage", b =>
                {
                    b.Property<int>("EmployeeId")
                        .HasColumnType("int")
                        .HasColumnName("employee_id");

                    b.Property<int?>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasColumnName("row_version");

                    b.Property<int>("WageId")
                        .HasColumnType("int")
                        .HasColumnName("wage_id");

                    b.ToTable("employeewage", (string)null);
                });

            modelBuilder.Entity("sql_ledger.Data.Model.ExchangeRate", b =>
                {
                    b.Property<string>("Curr")
                        .HasMaxLength(3)
                        .HasColumnType("char(3)")
                        .HasColumnName("curr");

                    b.Property<DateTime?>("TransDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("transdate");

                    b.Property<double?>("ExchangeRateValue")
                        .HasColumnType("float")
                        .HasColumnName("exchangerate");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasColumnName("row_version");

                    b.HasKey("Curr", "TransDate")
                        .HasName("exchangerate_ct_key");

                    b.ToTable("exchangerate", (string)null);
                });

            modelBuilder.Entity("sql_ledger.Data.Model.Gifi", b =>
                {
                    b.Property<string>("AccNo")
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("accno");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(MAX)")
                        .HasColumnName("description");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasColumnName("row_version");

                    b.HasKey("AccNo")
                        .HasName("gifi_acc_no");

                    b.ToTable("gifi", (string)null);
                });

            modelBuilder.Entity("sql_ledger.Data.Model.Gl", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasDefaultValueSql("NEXT VALUE FOR public_id");

                    b.Property<bool?>("Approved")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("approved");

                    b.Property<string>("Currency")
                        .HasMaxLength(3)
                        .HasColumnType("char(3)")
                        .HasColumnName("curr");

                    b.Property<int?>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("department_id");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("description");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int")
                        .HasColumnName("employee_id");

                    b.Property<double?>("ExchangeRate")
                        .HasColumnType("float")
                        .HasColumnName("exchangerate");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(MAX)")
                        .HasColumnName("notes");

                    b.Property<string>("Reference")
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("reference");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasColumnName("row_version");

                    b.Property<DateTime>("TransDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("transdate")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.HasKey("Id")
                        .HasName("gl_id_key");

                    b.HasIndex("Description")
                        .HasDatabaseName("gl_description_key");

                    b.HasIndex("EmployeeId")
                        .HasDatabaseName("gl_employee_id_key");

                    b.HasIndex("Reference")
                        .HasDatabaseName("gl_reference_key");

                    b.HasIndex("TransDate")
                        .HasDatabaseName("gl_transdate_key");

                    b.ToTable("gl", (string)null);
                });

            modelBuilder.Entity("sql_ledger.Data.Model.Inventory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasDefaultValueSql("NEXT VALUE FOR inventory_id");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int")
                        .HasColumnName("employee_id");

                    b.Property<int?>("OrderItemsId")
                        .HasColumnType("int")
                        .HasColumnName("orderitems_id");

                    b.Property<int?>("PartsId")
                        .HasColumnType("int")
                        .HasColumnName("parts_id");

                    b.Property<decimal?>("Qty")
                        .HasPrecision(28, 6)
                        .HasColumnType("decimal(28,6)")
                        .HasColumnName("qty");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasColumnName("row_version");

                    b.Property<DateTime?>("ShippingDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("shippingdate");

                    b.Property<int?>("TransId")
                        .HasColumnType("int")
                        .HasColumnName("trans_id");

                    b.Property<int?>("WarehouseId")
                        .HasColumnType("int")
                        .HasColumnName("warehouse_id");

                    b.HasKey("Id")
                        .HasName("inventory_id_key");

                    b.HasIndex("PartsId")
                        .HasDatabaseName("inventory_parts_id_key");

                    b.ToTable("inventory", (string)null);
                });

            modelBuilder.Entity("sql_ledger.Data.Model.Invoice", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasDefaultValueSql("NEXT VALUE FOR invoice_id");

                    b.Property<decimal?>("Allocated")
                        .HasPrecision(28, 6)
                        .HasColumnType("decimal(28,6)")
                        .HasColumnName("allocated");

                    b.Property<bool?>("AssemblyItem")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("assemblyitem");

                    b.Property<decimal?>("Cost")
                        .HasPrecision(28, 6)
                        .HasColumnType("decimal(28,6)")
                        .HasColumnName("cost");

                    b.Property<DateTime?>("DeliveryDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("deliverydate");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(MAX)")
                        .HasColumnName("description");

                    b.Property<float?>("Discount")
                        .HasColumnType("real")
                        .HasColumnName("discount");

                    b.Property<decimal?>("FxSellPrice")
                        .HasPrecision(28, 6)
                        .HasColumnType("decimal(28,6)")
                        .HasColumnName("fxsellprice");

                    b.Property<string>("ItemNotes")
                        .HasColumnType("nvarchar(MAX)")
                        .HasColumnName("itemnotes");

                    b.Property<bool?>("KitItem")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("kititem");

                    b.Property<bool?>("LineItemDetail")
                        .HasColumnType("bit")
                        .HasColumnName("lineitemdetail");

                    b.Property<string>("OrderNumber")
                        .HasColumnType("nvarchar(MAX)")
                        .HasColumnName("ordernumber");

                    b.Property<int?>("PartsId")
                        .HasColumnType("int")
                        .HasColumnName("parts_id");

                    b.Property<string>("PoNumber")
                        .HasColumnType("nvarchar(MAX)")
                        .HasColumnName("ponumber");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("int")
                        .HasColumnName("project_id");

                    b.Property<decimal?>("Qty")
                        .HasPrecision(28, 6)
                        .HasColumnType("decimal(28,6)")
                        .HasColumnName("qty");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasColumnName("row_version");

                    b.Property<decimal?>("SellPrice")
                        .HasPrecision(28, 6)
                        .HasColumnType("decimal(28,6)")
                        .HasColumnName("sellprice");

                    b.Property<string>("SerialNumber")
                        .HasColumnType("nvarchar(MAX)")
                        .HasColumnName("serialnumber");

                    b.Property<int?>("TransId")
                        .HasColumnType("int")
                        .HasColumnName("trans_id");

                    b.Property<string>("Unit")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)")
                        .HasColumnName("unit");

                    b.Property<string>("Vendor")
                        .HasColumnType("nvarchar(MAX)")
                        .HasColumnName("vendor");

                    b.Property<int?>("VendorId")
                        .HasColumnType("int")
                        .HasColumnName("vendor_id");

                    b.HasKey("Id")
                        .HasName("invoice_pkey");

                    b.HasIndex("TransId")
                        .HasDatabaseName("invoice_trans_id_key");

                    b.ToTable("invoice", (string)null);
                });

            modelBuilder.Entity("sql_ledger.Data.Model.JcItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasDefaultValueSql("NEXT VALUE FOR jcitems_id");

                    b.Property<decimal?>("Allocated")
                        .HasPrecision(28, 6)
                        .HasColumnType("decimal(28,6)")
                        .HasColumnName("allocated");

                    b.Property<DateTime?>("CheckedIn")
                        .HasColumnType("datetime2")
                        .HasColumnName("checkedin");

                    b.Property<DateTime?>("CheckedOut")
                        .HasColumnType("datetime2")
                        .HasColumnName("checkedout");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(MAX)")
                        .HasColumnName("description");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int")
                        .HasColumnName("employee_id");

                    b.Property<decimal?>("FxSellPrice")
                        .HasPrecision(28, 6)
                        .HasColumnType("decimal(28,6)")
                        .HasColumnName("fxsellprice");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(MAX)")
                        .HasColumnName("notes");

                    b.Property<int?>("PartsId")
                        .HasColumnType("int")
                        .HasColumnName("parts_id");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("int")
                        .HasColumnName("project_id");

                    b.Property<decimal?>("Qty")
                        .HasPrecision(28, 6)
                        .HasColumnType("decimal(28,6)")
                        .HasColumnName("qty");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasColumnName("row_version");

                    b.Property<decimal?>("SellPrice")
                        .HasPrecision(28, 6)
                        .HasColumnType("decimal(28,6)")
                        .HasColumnName("sellprice");

                    b.Property<string>("SerialNumber")
                        .HasColumnType("nvarchar(MAX)")
                        .HasColumnName("serialnumber");

                    b.HasKey("Id")
                        .HasName("jcitems_id_key");

                    b.ToTable("jcitems", (string)null);
                });

            modelBuilder.Entity("sql_ledger.Data.Model.Language", b =>
                {
                    b.Property<string>("Code")
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)")
                        .HasColumnName("code");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(MAX)")
                        .HasColumnName("description");

                    b.Property<bool>("IsRtl")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("rtl");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasColumnName("row_version");

                    b.HasKey("Code")
                        .HasName("language_code_key");

                    b.ToTable("language", (string)null);
                });

            modelBuilder.Entity("sql_ledger.Data.Model.MakeModel", b =>
                {
                    b.Property<string>("Make")
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("make");

                    b.Property<string>("Model")
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("model");

                    b.Property<int?>("PartsId")
                        .HasColumnType("int")
                        .HasColumnName("parts_id");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasColumnName("row_version");

                    b.HasIndex("Make")
                        .HasDatabaseName("makemodel_make_key");

                    b.HasIndex("Model")
                        .HasDatabaseName("makemodel_model_key");

                    b.HasIndex("PartsId")
                        .HasDatabaseName("makemodel_parts_id_key");

                    b.ToTable("makemodel", (string)null);
                });

            modelBuilder.Entity("sql_ledger.Data.Model.MimeType", b =>
                {
                    b.Property<string>("Extension")
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)")
                        .HasColumnName("extension");

                    b.Property<string>("ContentType")
                        .HasColumnType("nvarchar(64)")
                        .HasColumnName("contenttype");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasColumnName("row_version");

                    b.HasKey("Extension")
                        .HasName("mimetype_pkey");

                    b.ToTable("mimetype", (string)null);
                });

            modelBuilder.Entity("sql_ledger.Data.Model.Oe", b =>
                {
                    b.Property<int?>("AaId")
                        .HasColumnType("int")
                        .HasColumnName("aa_id");

                    b.Property<decimal?>("Amount")
                        .HasPrecision(28, 6)
                        .HasColumnType("decimal(28,6)")
                        .HasColumnName("amount");

                    b.Property<bool?>("BackOrder")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("backorder");

                    b.Property<bool?>("Closed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("closed");

                    b.Property<string>("Currency")
                        .HasMaxLength(3)
                        .HasColumnType("char(3)")
                        .HasColumnName("curr");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("customer_id");

                    b.Property<int?>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("department_id");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(MAX)")
                        .HasColumnName("description");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int")
                        .HasColumnName("employee_id");

                    b.Property<double?>("ExchangeRate")
                        .HasColumnType("float")
                        .HasColumnName("exchangerate");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasDefaultValueSql("NEXT VALUE FOR public_id");

                    b.Property<string>("IntNotes")
                        .HasColumnType("nvarchar(MAX)")
                        .HasColumnName("intnotes");

                    b.Property<string>("LanguageCode")
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)")
                        .HasColumnName("language_code");

                    b.Property<decimal?>("NetAmount")
                        .HasPrecision(28, 6)
                        .HasColumnType("decimal(28,6)")
                        .HasColumnName("netamount");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(MAX)")
                        .HasColumnName("notes");

                    b.Property<string>("OrdNumber")
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("ordnumber");

                    b.Property<string>("PoNumber")
                        .HasColumnType("nvarchar(MAX)")
                        .HasColumnName("ponumber");

                    b.Property<string>("QuoNumber")
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("quonumber");

                    b.Property<bool?>("Quotation")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("quotation");

                    b.Property<DateTime>("ReqDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("reqdate");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasColumnName("row_version");

                    b.Property<string>("ShipVia")
                        .HasColumnType("nvarchar(MAX)")
                        .HasColumnName("shipvia");

                    b.Property<string>("ShippingPoint")
                        .HasColumnType("nvarchar(MAX)")
                        .HasColumnName("shippingpoint");

                    b.Property<bool>("TaxIncluded")
                        .HasColumnType("bit")
                        .HasColumnName("taxincluded");

                    b.Property<short>("Terms")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)0)
                        .HasColumnName("terms");

                    b.Property<DateTime>("TransDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("transdate")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int?>("VendorId")
                        .HasColumnType("int")
                        .HasColumnName("vendor_id");

                    b.Property<int?>("WarehouseId")
                        .HasColumnType("int")
                        .HasColumnName("warehouse_id");

                    b.Property<string>("WayBill")
                        .HasColumnType("nvarchar(MAX)")
                        .HasColumnName("waybill");

                    b.HasIndex("EmployeeId")
                        .HasDatabaseName("oe_employee_id_key");

                    b.HasIndex("Id")
                        .HasDatabaseName("oe_id_key");

                    b.HasIndex("OrdNumber")
                        .HasDatabaseName("oe_ordnumber_key");

                    b.HasIndex("TransDate")
                        .HasDatabaseName("oe_transdate_key");

                    b.ToTable("oe", (string)null);
                });

            modelBuilder.Entity("sql_ledger.Data.Model.OrderItem", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasDefaultValueSql("NEXT VALUE FOR orderitems_id");

                    b.Property<decimal?>("Cost")
                        .HasPrecision(28, 6)
                        .HasColumnType("decimal(28,6)")
                        .HasColumnName("cost");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(MAX)")
                        .HasColumnName("description");

                    b.Property<float?>("Discount")
                        .HasColumnType("real")
                        .HasColumnName("discount");

                    b.Property<string>("ItemNotes")
                        .HasColumnType("nvarchar(MAX)")
                        .HasColumnName("itemnotes");

                    b.Property<bool?>("LineItemDetail")
                        .HasColumnType("bit")
                        .HasColumnName("lineitemdetail");

                    b.Property<string>("OrderNumber")
                        .HasColumnType("nvarchar(MAX)")
                        .HasColumnName("ordernumber");

                    b.Property<int?>("PartsId")
                        .HasColumnType("int")
                        .HasColumnName("parts_id");

                    b.Property<string>("PoNumber")
                        .HasColumnType("nvarchar(MAX)")
                        .HasColumnName("ponumber");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("int")
                        .HasColumnName("project_id");

                    b.Property<decimal?>("Qty")
                        .HasPrecision(28, 6)
                        .HasColumnType("decimal(28,6)")
                        .HasColumnName("qty");

                    b.Property<DateTime>("ReqDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("reqdate");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasColumnName("row_version");

                    b.Property<decimal?>("SellPrice")
                        .HasPrecision(28, 6)
                        .HasColumnType("decimal(28,6)")
                        .HasColumnName("sellprice");

                    b.Property<string>("SerialNumber")
                        .HasColumnType("nvarchar(MAX)")
                        .HasColumnName("serialnumber");

                    b.Property<decimal?>("Ship")
                        .HasPrecision(28, 6)
                        .HasColumnType("decimal(28,6)")
                        .HasColumnName("ship");

                    b.Property<int?>("TransId")
                        .HasColumnType("int")
                        .HasColumnName("trans_id");

                    b.Property<string>("Unit")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)")
                        .HasColumnName("unit");

                    b.Property<string>("Vendor")
                        .HasColumnType("nvarchar(MAX)")
                        .HasColumnName("vendor");

                    b.Property<int?>("VendorId")
                        .HasColumnType("int")
                        .HasColumnName("vendor_id");

                    b.HasKey("Id")
                        .HasName("orderitems_id_pkey");

                    b.HasIndex("TransId")
                        .HasDatabaseName("orderitems_trans_id_key");

                    b.ToTable("orderitems", (string)null);
                });

            modelBuilder.Entity("sql_ledger.Data.Model.Part", b =>
                {
                    b.Property<bool>("Alternate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("alternate");

                    b.Property<bool>("Assembly")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("assembly");

                    b.Property<decimal?>("AvgCost")
                        .HasPrecision(28, 6)
                        .HasColumnType("decimal(28,6)")
                        .HasColumnName("avgcost");

                    b.Property<string>("BarCode")
                        .HasColumnType("nvarchar(MAX)")
                        .HasColumnName("barcode");

                    b.Property<string>("Bin")
                        .HasColumnType("nvarchar(MAX)")
                        .HasColumnName("bin");

                    b.Property<bool>("Bom")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("bom");

                    b.Property<bool>("CheckInventory")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("checkinventory");

                    b.Property<string>("CountryOrigin")
                        .HasColumnType("nvarchar(MAX)")
                        .HasColumnName("countryorigin");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("description");

                    b.Property<string>("Drawing")
                        .HasColumnType("nvarchar(MAX)")
                        .HasColumnName("drawing");

                    b.Property<int?>("ExpenseAccnoId")
                        .HasColumnType("int")
                        .HasColumnName("expense_accno_id");

                    b.Property<DateTime>("Expires")
                        .HasColumnType("datetime2")
                        .HasColumnName("expires");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasDefaultValueSql("NEXT VALUE FOR public_id");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(MAX)")
                        .HasColumnName("image");

                    b.Property<int?>("IncomeAccnoId")
                        .HasColumnType("int")
                        .HasColumnName("income_accno_id");

                    b.Property<int?>("InventoryAccnoId")
                        .HasColumnType("int")
                        .HasColumnName("inventory_accno_id");

                    b.Property<decimal?>("LastCost")
                        .HasPrecision(28, 6)
                        .HasColumnType("decimal(28,6)")
                        .HasColumnName("lastcost");

                    b.Property<decimal?>("ListPrice")
                        .HasPrecision(28, 6)
                        .HasColumnType("decimal(28,6)")
                        .HasColumnName("listprice");

                    b.Property<string>("Lot")
                        .HasColumnType("nvarchar(MAX)")
                        .HasColumnName("lot");

                    b.Property<bool>("MakeModel")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("makemodel");

                    b.Property<string>("Microfiche")
                        .HasColumnType("nvarchar(MAX)")
                        .HasColumnName("microfiche");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(MAX)")
                        .HasColumnName("notes");

                    b.Property<bool>("Obsolete")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("obsolete");

                    b.Property<decimal>("OnHand")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(28, 6)
                        .HasColumnType("decimal(28,6)")
                        .HasDefaultValue(0m)
                        .HasColumnName("onhand");

                    b.Property<string>("PartNumber")
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("partnumber");

                    b.Property<int?>("PartsGroupId")
                        .HasColumnType("int")
                        .HasColumnName("partsgroup_id");

                    b.Property<DateTime>("PriceUpdate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("priceupdate")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("int")
                        .HasColumnName("project_id");

                    b.Property<decimal?>("Rop")
                        .HasPrecision(28, 6)
                        .HasColumnType("decimal(28,6)")
                        .HasColumnName("rop");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasColumnName("row_version");

                    b.Property<decimal?>("SellPrice")
                        .HasPrecision(28, 6)
                        .HasColumnType("decimal(28,6)")
                        .HasColumnName("sellprice");

                    b.Property<string>("TariffHscode")
                        .HasColumnType("nvarchar(MAX)")
                        .HasColumnName("tariff_hscode");

                    b.Property<string>("ToolNumber")
                        .HasColumnType("nvarchar(MAX)")
                        .HasColumnName("toolnumber");

                    b.Property<string>("Unit")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)")
                        .HasColumnName("unit");

                    b.Property<decimal?>("Weight")
                        .HasPrecision(28, 6)
                        .HasColumnType("decimal(28,6)")
                        .HasColumnName("weight");

                    b.HasIndex("Description")
                        .HasDatabaseName("parts_description_key");

                    b.HasIndex("Id")
                        .HasDatabaseName("parts_id_key");

                    b.HasIndex("PartNumber")
                        .HasDatabaseName("parts_partnumber_key");

                    b.ToTable("parts", (string)null);
                });

            modelBuilder.Entity("sql_ledger.Data.Model.PartsCustomer", b =>
                {
                    b.Property<string>("Currency")
                        .HasMaxLength(3)
                        .HasColumnType("char(3)")
                        .HasColumnName("curr");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("customer_id");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("validto");

                    b.Property<int?>("PartsId")
                        .HasColumnType("int")
                        .HasColumnName("parts_id");

                    b.Property<decimal?>("PriceBreak")
                        .HasPrecision(28, 6)
                        .HasColumnType("decimal(28,6)")
                        .HasColumnName("pricebreak");

                    b.Property<int?>("PriceGroupId")
                        .HasColumnType("int")
                        .HasColumnName("pricegroup_id");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasColumnName("row_version");

                    b.Property<decimal?>("SellPrice")
                        .HasPrecision(28, 6)
                        .HasColumnType("decimal(28,6)")
                        .HasColumnName("sellprice");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("validfrom");

                    b.HasIndex("CustomerId")
                        .HasDatabaseName("partscustomer_customer_id_key");

                    b.HasIndex("PartsId")
                        .HasDatabaseName("partscustomer_parts_id_key");

                    b.ToTable("partscustomer", (string)null);
                });

            modelBuilder.Entity("sql_ledger.Data.Model.PartsGroup", b =>
                {
                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(MAX)")
                        .HasColumnName("code");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasDefaultValueSql("NEXT VALUE FOR public_id");

                    b.Property<string>("Image")
                        .HasColumnType("nvarchar(MAX)")
                        .HasColumnName("image");

                    b.Property<string>("PartsGroupId")
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("partsgroup");

                    b.Property<bool>("Pos")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("pos");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasColumnName("row_version");

                    b.HasIndex("Id")
                        .IsUnique()
                        .HasDatabaseName("partsgroup_id_key");

                    b.HasIndex("PartsGroupId")
                        .HasDatabaseName("partsgroup_key");

                    b.ToTable("partsgroup", (string)null);
                });

            modelBuilder.Entity("sql_ledger.Data.Model.PartsTax", b =>
                {
                    b.Property<int?>("ChartId")
                        .HasColumnType("int")
                        .HasColumnName("chart_id");

                    b.Property<int?>("PartsId")
                        .HasColumnType("int")
                        .HasColumnName("parts_id");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasColumnName("row_version");

                    b.HasIndex("PartsId")
                        .HasDatabaseName("partstax_parts_id_key");

                    b.ToTable("partstax", (string)null);
                });

            modelBuilder.Entity("sql_ledger.Data.Model.PartsVendor", b =>
                {
                    b.Property<string>("Currency")
                        .HasMaxLength(3)
                        .HasColumnType("char(3)")
                        .HasColumnName("curr");

                    b.Property<decimal?>("LastCost")
                        .HasPrecision(28, 6)
                        .HasColumnType("decimal(28,6)")
                        .HasColumnName("lastcost");

                    b.Property<short?>("LeadTime")
                        .HasColumnType("smallint")
                        .HasColumnName("leadtime");

                    b.Property<string>("PartNumber")
                        .HasColumnType("nvarchar(MAX)")
                        .HasColumnName("partnumber");

                    b.Property<int?>("PartsId")
                        .HasColumnType("int")
                        .HasColumnName("parts_id");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasColumnName("row_version");

                    b.Property<int?>("VendorId")
                        .HasColumnType("int")
                        .HasColumnName("vendor_id");

                    b.HasIndex("PartsId")
                        .HasDatabaseName("partsvendor_parts_id_key");

                    b.HasIndex("VendorId")
                        .HasDatabaseName("partsvendor_vendor_id_key");

                    b.ToTable("partsvendor", (string)null);
                });

            modelBuilder.Entity("sql_ledger.Data.Model.PayRate", b =>
                {
                    b.Property<decimal?>("Above")
                        .HasPrecision(28, 6)
                        .HasColumnType("decimal(28,6)")
                        .HasColumnName("above");

                    b.Property<int?>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<decimal?>("Rate")
                        .HasPrecision(28, 6)
                        .HasColumnType("decimal(28,6)")
                        .HasColumnName("rate");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasColumnName("row_version");

                    b.Property<int?>("TransId")
                        .HasColumnType("int")
                        .HasColumnName("trans_id");

                    b.ToTable("payrate", (string)null);
                });

            modelBuilder.Entity("sql_ledger.Data.Model.PayTrans", b =>
                {
                    b.Property<decimal?>("Amount")
                        .HasPrecision(28, 6)
                        .HasColumnType("decimal(28,6)")
                        .HasColumnName("amount");

                    b.Property<int?>("GlId")
                        .HasColumnType("int")
                        .HasColumnName("glid");

                    b.Property<int?>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<decimal?>("Qty")
                        .HasPrecision(28, 6)
                        .HasColumnType("decimal(28,6)")
                        .HasColumnName("qty");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasColumnName("row_version");

                    b.Property<int?>("TransId")
                        .HasColumnType("int")
                        .HasColumnName("trans_id");

                    b.ToTable("pay_trans", (string)null);
                });

            modelBuilder.Entity("sql_ledger.Data.Model.Payment", b =>
                {
                    b.Property<double?>("ExchangeRate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("float")
                        .HasDefaultValue(1.0)
                        .HasColumnName("exchangerate");

                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<int?>("PaymentMethodId")
                        .HasColumnType("int")
                        .HasColumnName("paymentmethod_id");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasColumnName("row_version");

                    b.Property<int>("TransId")
                        .HasColumnType("int")
                        .HasColumnName("trans_id");

                    b.ToTable("payment", (string)null);
                });

            modelBuilder.Entity("sql_ledger.Data.Model.PaymentMethod", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasDefaultValueSql("NEXT VALUE FOR public_id");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(MAX)")
                        .HasColumnName("description");

                    b.Property<decimal?>("Fee")
                        .HasPrecision(28, 6)
                        .HasColumnType("decimal(28,6)")
                        .HasColumnName("fee");

                    b.Property<short?>("Rn")
                        .HasColumnType("smallint")
                        .HasColumnName("rn");

                    b.Property<double?>("RoundChange")
                        .HasColumnType("float")
                        .HasColumnName("roundchange");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasColumnName("row_version");

                    b.HasKey("Id")
                        .HasName("paymentmethod_pkey");

                    b.ToTable("paymentmethod", (string)null);
                });

            modelBuilder.Entity("sql_ledger.Data.Model.PriceGroup", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasDefaultValueSql("NEXT VALUE FOR public_id");

                    b.Property<string>("Price_Group")
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("pricegroup");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasColumnName("row_version");

                    b.HasIndex("Id")
                        .HasDatabaseName("pricegroup_id_key");

                    b.HasIndex("Price_Group")
                        .HasDatabaseName("pricegroup_pricegroup_key");

                    b.ToTable("pricegroup", (string)null);
                });

            modelBuilder.Entity("sql_ledger.Data.Model.Project", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasDefaultValueSql("NEXT VALUE FOR public_id");

                    b.Property<decimal>("Completed")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(28, 6)
                        .HasColumnType("decimal(28,6)")
                        .HasDefaultValue(0m)
                        .HasColumnName("completed");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("customer_id");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(MAX)")
                        .HasColumnName("description");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("enddate");

                    b.Property<int?>("PartsId")
                        .HasColumnType("int")
                        .HasColumnName("parts_id");

                    b.Property<decimal>("Production")
                        .ValueGeneratedOnAdd()
                        .HasPrecision(28, 6)
                        .HasColumnType("decimal(28,6)")
                        .HasDefaultValue(0m)
                        .HasColumnName("production");

                    b.Property<string>("ProjectNumber")
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("projectnumber");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasColumnName("row_version");

                    b.Property<DateTime>("StartDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("startdate");

                    b.HasKey("Id")
                        .HasName("project_id_key");

                    b.HasIndex("ProjectNumber")
                        .IsUnique()
                        .HasDatabaseName("projectnumber_key")
                        .HasFilter("[projectnumber] IS NOT NULL");

                    b.ToTable("project", (string)null);
                });

            modelBuilder.Entity("sql_ledger.Data.Model.Recurring", b =>
                {
                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(MAX)")
                        .HasColumnName("description");

                    b.Property<DateTime?>("EndDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("enddate");

                    b.Property<int?>("HowMany")
                        .HasColumnType("int")
                        .HasColumnName("howmany");

                    b.Property<int>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<DateTime?>("NextDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("nextdate");

                    b.Property<bool>("Payment")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("payment");

                    b.Property<string>("Reference")
                        .HasColumnType("nvarchar(MAX)")
                        .HasColumnName("reference");

                    b.Property<short?>("Repeat")
                        .HasColumnType("smallint")
                        .HasColumnName("repeat");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasColumnName("row_version");

                    b.Property<DateTime?>("StartDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("startdate");

                    b.Property<string>("Unit")
                        .HasMaxLength(5)
                        .HasColumnType("nvarchar(5)")
                        .HasColumnName("unit");

                    b.ToTable("recurring", (string)null);
                });

            modelBuilder.Entity("sql_ledger.Data.Model.RecurringEmail", b =>
                {
                    b.Property<string>("FormName")
                        .HasColumnType("nvarchar(MAX)")
                        .HasColumnName("formname");

                    b.Property<string>("Format")
                        .HasColumnType("nvarchar(MAX)")
                        .HasColumnName("format");

                    b.Property<int?>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(MAX)")
                        .HasColumnName("message");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasColumnName("row_version");

                    b.ToTable("recurringemail", (string)null);
                });

            modelBuilder.Entity("sql_ledger.Data.Model.RecurringPrint", b =>
                {
                    b.Property<string>("FormName")
                        .HasColumnType("nvarchar(MAX)")
                        .HasColumnName("formname");

                    b.Property<string>("Format")
                        .HasColumnType("nvarchar(MAX)")
                        .HasColumnName("format");

                    b.Property<int?>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Printer")
                        .HasColumnType("nvarchar(MAX)")
                        .HasColumnName("printer");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasColumnName("row_version");

                    b.ToTable("recurringprint", (string)null);
                });

            modelBuilder.Entity("sql_ledger.Data.Model.Reference", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasDefaultValueSql("NEXT VALUE FOR reference_id");

                    b.Property<int?>("ArchiveId")
                        .HasColumnType("int")
                        .HasColumnName("archive_id");

                    b.Property<string>("Code")
                        .HasColumnType("nvarchar(MAX)")
                        .HasColumnName("code");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(MAX)")
                        .HasColumnName("description");

                    b.Property<string>("Folder")
                        .HasColumnType("nvarchar(MAX)")
                        .HasColumnName("folder");

                    b.Property<string>("FormName")
                        .HasColumnType("nvarchar(MAX)")
                        .HasColumnName("formname");

                    b.Property<string>("Login")
                        .HasColumnType("nvarchar(MAX)")
                        .HasColumnName("login");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasColumnName("row_version");

                    b.Property<int?>("TransId")
                        .HasColumnType("int")
                        .HasColumnName("trans_id");

                    b.HasKey("Id")
                        .HasName("reference_pkey");

                    b.ToTable("reference", (string)null);
                });

            modelBuilder.Entity("sql_ledger.Data.Model.Report", b =>
                {
                    b.Property<int>("ReportId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("reportid")
                        .HasDefaultValueSql("NEXT VALUE FOR public_id");

                    b.Property<string>("Login")
                        .HasColumnType("nvarchar(MAX)")
                        .HasColumnName("login");

                    b.Property<string>("ReportCode")
                        .HasColumnType("nvarchar(MAX)")
                        .HasColumnName("reportcode");

                    b.Property<string>("ReportDescription")
                        .HasColumnType("nvarchar(MAX)")
                        .HasColumnName("reportdescription");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasColumnName("row_version");

                    b.HasKey("ReportId")
                        .HasName("report_pkey");

                    b.ToTable("report", (string)null);
                });

            modelBuilder.Entity("sql_ledger.Data.Model.Tax", b =>
                {
                    b.Property<int>("ChartId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("chart_id");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("ChartId"));

                    b.Property<decimal?>("Rate")
                        .HasPrecision(28, 6)
                        .HasColumnType("decimal(28,6)")
                        .HasColumnName("rate");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasColumnName("row_version");

                    b.Property<string>("TaxNumber")
                        .HasColumnType("nvarchar(MAX)")
                        .HasColumnName("taxnumber");

                    b.Property<DateTime?>("ValidTo")
                        .HasColumnType("datetime2")
                        .HasColumnName("validto");

                    b.HasKey("ChartId")
                        .HasName("tax_pkey");

                    b.ToTable("tax", (string)null);
                });

            modelBuilder.Entity("sql_ledger.Data.Model.Vr", b =>
                {
                    b.Property<int?>("BrId")
                        .IsRequired()
                        .HasColumnType("int")
                        .HasColumnName("br_id");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasDefaultValueSql("NEXT VALUE FOR public_id");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasColumnName("row_version");

                    b.Property<int>("TransId")
                        .HasColumnType("int")
                        .HasColumnName("trans_id");

                    b.Property<string>("VoucherNumber")
                        .HasColumnType("nvarchar(MAX)")
                        .HasColumnName("vouchernumber");

                    b.HasIndex("BrId");

                    b.ToTable("vr", (string)null);
                });

            modelBuilder.Entity("sql_ledger.Data.Model.Wage", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasDefaultValueSql("NEXT VALUE FOR public_id");

                    b.Property<decimal?>("Amount")
                        .HasPrecision(28, 6)
                        .HasColumnType("decimal(28,6)")
                        .HasColumnName("amount");

                    b.Property<int>("ChartId")
                        .HasColumnType("int")
                        .HasColumnName("chart_id");

                    b.Property<int?>("Defer")
                        .HasColumnType("int")
                        .HasColumnName("defer");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(MAX)")
                        .HasColumnName("description");

                    b.Property<bool>("Exempt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("exempt");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasColumnName("row_version");

                    b.HasKey("Id")
                        .HasName("wage_pkey");

                    b.ToTable("wage", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("sql_ledger.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("sql_ledger.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("sql_ledger.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("sql_ledger.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("sql_ledger.Data.Model.ArchiveData", b =>
                {
                    b.HasOne("sql_ledger.Data.Model.Archive", "Archive")
                        .WithMany()
                        .HasForeignKey("ArchiveId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("archivedata_archive_id_fkey");

                    b.Navigation("Archive");
                });

            modelBuilder.Entity("sql_ledger.Data.Model.Chart", b =>
                {
                    b.HasOne("sql_ledger.Data.Model.Gifi", "Gifi")
                        .WithMany()
                        .HasForeignKey("AccNo")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("chart_gifi_id_fkey");

                    b.Navigation("Gifi");
                });

            modelBuilder.Entity("sql_ledger.Data.Model.CustomerTax", b =>
                {
                    b.HasOne("sql_ledger.Data.Model.Tax", null)
                        .WithMany("CustomerTaxes")
                        .HasForeignKey("ChartId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("sql_ledger.Data.Model.Customer", null)
                        .WithMany("CustomerTaxes")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("sql_ledger.Data.Model.DeductionDeductionRate", b =>
                {
                    b.HasOne("sql_ledger.Data.Model.DeductionRate", null)
                        .WithMany("DeductionDeductionRates")
                        .HasForeignKey("DeductionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("sql_ledger.Data.Model.Deduction", null)
                        .WithMany("DeductionDeductionRates")
                        .HasForeignKey("TransId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("sql_ledger.Data.Model.DptTrans", b =>
                {
                    b.HasOne("sql_ledger.Data.Model.Department", "Department")
                        .WithMany()
                        .HasForeignKey("DepartmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("department_department_id_fkey");

                    b.Navigation("Department");
                });

            modelBuilder.Entity("sql_ledger.Data.Model.EmployeeDeduction", b =>
                {
                    b.HasOne("sql_ledger.Data.Model.Employee", "Employee")
                        .WithMany()
                        .HasForeignKey("EmployeeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("employee_employee_id_fkey");

                    b.Navigation("Employee");
                });

            modelBuilder.Entity("sql_ledger.Data.Model.ExchangeRate", b =>
                {
                    b.HasOne("sql_ledger.Data.Model.Currency", "CurrencyValue")
                        .WithMany()
                        .HasForeignKey("Curr")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("exchangerate_curr_id_fkey");

                    b.Navigation("CurrencyValue");
                });

            modelBuilder.Entity("sql_ledger.Data.Model.Vr", b =>
                {
                    b.HasOne("sql_ledger.Data.Model.Br", "Br")
                        .WithMany()
                        .HasForeignKey("BrId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("vr_br_id_fkey");

                    b.Navigation("Br");
                });

            modelBuilder.Entity("sql_ledger.Data.Model.Customer", b =>
                {
                    b.Navigation("CustomerTaxes");
                });

            modelBuilder.Entity("sql_ledger.Data.Model.Deduction", b =>
                {
                    b.Navigation("DeductionDeductionRates");
                });

            modelBuilder.Entity("sql_ledger.Data.Model.DeductionRate", b =>
                {
                    b.Navigation("DeductionDeductionRates");
                });

            modelBuilder.Entity("sql_ledger.Data.Model.Tax", b =>
                {
                    b.Navigation("CustomerTaxes");
                });
#pragma warning restore 612, 618
        }
    }
}
