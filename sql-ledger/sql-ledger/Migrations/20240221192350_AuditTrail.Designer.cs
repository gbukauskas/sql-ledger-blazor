// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using sql_ledger.Data;

#nullable disable

namespace sqlledger.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240221192350_AuditTrail")]
    partial class AuditTrail
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.1")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.HasSequence<int>("address_id");

            modelBuilder.HasSequence<int>("archive_id");

            modelBuilder.HasSequence<int>("assembly_id");

            modelBuilder.HasSequence<int>("public_id")
                .StartsAt(10000L);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("RoleId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("UserId")
                        .IsRequired()
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("RoleId")
                        .HasColumnType("nvarchar(450)");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("sql_ledger.Data.ApplicationUser", b =>
                {
                    b.Property<string>("Id")
                        .HasColumnType("nvarchar(450)");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers", (string)null);
                });

            modelBuilder.Entity("sql_ledger.Data.Model.Acc_trans", b =>
                {
                    b.Property<decimal?>("Amount")
                        .HasPrecision(28, 6)
                        .HasColumnType("decimal(28,6)")
                        .HasColumnName("amount");

                    b.Property<bool?>("Approved")
                        .HasColumnType("bit")
                        .HasColumnName("approved");

                    b.Property<int?>("ChartId")
                        .HasColumnType("int")
                        .HasColumnName("chart_id");

                    b.Property<DateTime?>("Cleared")
                        .HasColumnType("datetime2")
                        .HasColumnName("cleared");

                    b.Property<bool?>("FxTransaction")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("fx_transaction");

                    b.Property<int?>("Id")
                        .HasColumnType("int")
                        .HasColumnName("id");

                    b.Property<string>("Memo")
                        .HasColumnType("nvarchar(MAX)")
                        .HasColumnName("memo");

                    b.Property<int?>("ProjectId")
                        .HasColumnType("int")
                        .HasColumnName("project_id");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasColumnName("row_version");

                    b.Property<string>("Source")
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("source");

                    b.Property<DateTime?>("TransDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("transdate");

                    b.Property<int?>("TransId")
                        .HasColumnType("int")
                        .HasColumnName("trans_id");

                    b.Property<int?>("VrId")
                        .HasColumnType("int")
                        .HasColumnName("vr_id");

                    b.HasIndex("ChartId")
                        .HasDatabaseName("acc_trans_chart_id_key");

                    b.HasIndex("Source")
                        .HasDatabaseName("acc_trans_source_key");

                    b.HasIndex("TransDate")
                        .HasDatabaseName("acc_trans_transdate_key");

                    b.HasIndex("TransId")
                        .HasDatabaseName("acc_trans_trans_id_key");

                    b.ToTable("acc_trans", (string)null);
                });

            modelBuilder.Entity("sql_ledger.Data.Model.AcsRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasDefaultValueSql("NEXT VALUE FOR public_id");

                    b.Property<string>("Acs")
                        .HasColumnType("nvarchar(max)")
                        .HasColumnName("acs");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(MAX)")
                        .HasColumnName("description");

                    b.Property<short?>("Rn")
                        .HasColumnType("smallint")
                        .HasColumnName("rn");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasColumnName("row_version");

                    b.HasKey("Id")
                        .HasName("acsrole_pkey");

                    b.ToTable("acsrole", (string)null);
                });

            modelBuilder.Entity("sql_ledger.Data.Model.Address", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasDefaultValueSql("NEXT VALUE FOR address_id");

                    b.Property<string>("Address1")
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)")
                        .HasColumnName("address1");

                    b.Property<string>("Address2")
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)")
                        .HasColumnName("address2");

                    b.Property<string>("City")
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)")
                        .HasColumnName("city");

                    b.Property<string>("Country")
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)")
                        .HasColumnName("country");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasColumnName("row_version");

                    b.Property<string>("State")
                        .HasMaxLength(32)
                        .HasColumnType("nvarchar(32)")
                        .HasColumnName("state");

                    b.Property<int?>("TransId")
                        .HasColumnType("int")
                        .HasColumnName("trans_id");

                    b.Property<string>("Zipcode")
                        .HasMaxLength(10)
                        .HasColumnType("nvarchar(10)")
                        .HasColumnName("zipcode");

                    b.HasKey("Id")
                        .HasName("address_pkey");

                    b.ToTable("address", (string)null);
                });

            modelBuilder.Entity("sql_ledger.Data.Model.Ap", b =>
                {
                    b.Property<decimal?>("Amount")
                        .HasPrecision(28, 6)
                        .HasColumnType("decimal(28,6)")
                        .HasColumnName("amount");

                    b.Property<bool?>("Approved")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("approved");

                    b.Property<int?>("BankId")
                        .HasColumnType("int")
                        .HasColumnName("bank_id");

                    b.Property<float?>("CashDiscount")
                        .HasColumnType("real")
                        .HasColumnName("cashdiscount");

                    b.Property<string>("Curr")
                        .HasMaxLength(3)
                        .HasColumnType("char(3)")
                        .HasColumnName("curr");

                    b.Property<DateTime?>("DatePaid")
                        .HasColumnType("datetime2")
                        .HasColumnName("datepaid");

                    b.Property<string>("Dcn")
                        .HasColumnType("nvarchar(MAX)")
                        .HasColumnName("dcn");

                    b.Property<int?>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("department_id");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(MAX)")
                        .HasColumnName("description");

                    b.Property<short?>("DiscountTerms")
                        .HasColumnType("smallint")
                        .HasColumnName("discountterms");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("duedate");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int")
                        .HasColumnName("employee_id");

                    b.Property<double?>("ExchangeRate")
                        .HasColumnType("float")
                        .HasColumnName("exchangerate");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasDefaultValueSql("NEXT VALUE FOR public_id");

                    b.Property<string>("IntNotes")
                        .HasColumnType("nvarchar(MAX)")
                        .HasColumnName("intnotes");

                    b.Property<string>("InvNumber")
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("invnumber");

                    b.Property<bool>("Invoice")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("invoice");

                    b.Property<string>("LanguageCode")
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)")
                        .HasColumnName("language_code");

                    b.Property<decimal?>("NetAmount")
                        .HasPrecision(28, 6)
                        .HasColumnType("decimal(28,6)")
                        .HasColumnName("netamount");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(MAX)")
                        .HasColumnName("notes");

                    b.Property<bool>("OnHold")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("onhold");

                    b.Property<string>("OrdNumber")
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("ordnumber");

                    b.Property<decimal?>("Paid")
                        .HasPrecision(28, 6)
                        .HasColumnType("decimal(28,6)")
                        .HasColumnName("paid");

                    b.Property<int?>("PaymentMethodId")
                        .HasColumnType("int")
                        .HasColumnName("paymentmethod_id");

                    b.Property<string>("PoNumber")
                        .HasColumnType("nvarchar(MAX)")
                        .HasColumnName("ponumber");

                    b.Property<string>("QuoNumber")
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("quonumber");

                    b.Property<byte[]>("RowVersion")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("ShipVia")
                        .HasColumnType("nvarchar(MAX)")
                        .HasColumnName("shipvia");

                    b.Property<string>("ShippingPoint")
                        .HasColumnType("nvarchar(MAX)")
                        .HasColumnName("shippingpoint");

                    b.Property<bool>("TaxIncluded")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("taxincluded");

                    b.Property<short>("Terms")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)0)
                        .HasColumnName("terms");

                    b.Property<string>("Till")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("till");

                    b.Property<DateTime>("TransDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("transdate")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int?>("VendorId")
                        .HasColumnType("int")
                        .HasColumnName("vendor_id");

                    b.Property<int?>("WarehouseId")
                        .HasColumnType("int")
                        .HasColumnName("warehouse_id");

                    b.Property<string>("WayBill")
                        .HasColumnType("nvarchar(MAX)")
                        .HasColumnName("waybill");

                    b.HasIndex("EmployeeId")
                        .HasDatabaseName("ap_employee_id_key");

                    b.HasIndex("Id")
                        .HasDatabaseName("ap_id_key");

                    b.HasIndex("InvNumber")
                        .HasDatabaseName("ap_invnumber_key");

                    b.HasIndex("OrdNumber")
                        .HasDatabaseName("ap_ordnumber_key");

                    b.HasIndex("QuoNumber")
                        .HasDatabaseName("ap_quonumber_key");

                    b.HasIndex("TransDate")
                        .HasDatabaseName("ap_transdate_key");

                    b.HasIndex("VendorId")
                        .HasDatabaseName("ap_vendor_id_key");

                    b.ToTable("ap", (string)null);
                });

            modelBuilder.Entity("sql_ledger.Data.Model.Ar", b =>
                {
                    b.Property<decimal?>("Amount")
                        .HasPrecision(28, 6)
                        .HasColumnType("decimal(28,6)")
                        .HasColumnName("amount");

                    b.Property<bool?>("Approved")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(true)
                        .HasColumnName("approved");

                    b.Property<int?>("BankId")
                        .HasColumnType("int")
                        .HasColumnName("bank_id");

                    b.Property<float?>("CashDiscount")
                        .HasColumnType("real")
                        .HasColumnName("cashdiscount");

                    b.Property<string>("Curr")
                        .HasMaxLength(3)
                        .HasColumnType("char(3)")
                        .HasColumnName("curr");

                    b.Property<int?>("CustomerId")
                        .HasColumnType("int")
                        .HasColumnName("customer_id");

                    b.Property<DateTime?>("DatePaid")
                        .HasColumnType("datetime2")
                        .HasColumnName("datepaid");

                    b.Property<string>("Dcn")
                        .HasColumnType("nvarchar(MAX)")
                        .HasColumnName("dcn");

                    b.Property<int?>("DepartmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasDefaultValue(0)
                        .HasColumnName("department_id");

                    b.Property<string>("Description")
                        .HasColumnType("nvarchar(MAX)")
                        .HasColumnName("description");

                    b.Property<short?>("DiscountTerms")
                        .HasColumnType("smallint")
                        .HasColumnName("discountterms");

                    b.Property<DateTime?>("DueDate")
                        .HasColumnType("datetime2")
                        .HasColumnName("duedate");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int")
                        .HasColumnName("employee_id");

                    b.Property<double?>("ExchangeRate")
                        .HasColumnType("float")
                        .HasColumnName("exchangerate");

                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasDefaultValueSql("NEXT VALUE FOR public_id");

                    b.Property<string>("IntNotes")
                        .HasColumnType("nvarchar(MAX)")
                        .HasColumnName("intnotes");

                    b.Property<string>("InvNumber")
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("invnumber");

                    b.Property<bool>("Invoice")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("invoice");

                    b.Property<string>("LanguageCode")
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)")
                        .HasColumnName("language_code");

                    b.Property<decimal?>("NetAmount")
                        .HasPrecision(28, 6)
                        .HasColumnType("decimal(28,6)")
                        .HasColumnName("netamount");

                    b.Property<string>("Notes")
                        .HasColumnType("nvarchar(MAX)")
                        .HasColumnName("notes");

                    b.Property<bool?>("OnHold")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false)
                        .HasColumnName("onhold");

                    b.Property<string>("OrdNumber")
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("ordnumber");

                    b.Property<decimal?>("Paid")
                        .HasPrecision(28, 6)
                        .HasColumnType("decimal(28,6)")
                        .HasColumnName("paid");

                    b.Property<int?>("PaymentMethodId")
                        .HasColumnType("int")
                        .HasColumnName("paymentmethod_id");

                    b.Property<string>("PoNumber")
                        .HasColumnType("nvarchar(MAX)")
                        .HasColumnName("ponumber");

                    b.Property<string>("QuoNumber")
                        .HasColumnType("nvarchar(4000)")
                        .HasColumnName("quonumber");

                    b.Property<byte[]>("RowVersion")
                        .HasColumnType("varbinary(max)");

                    b.Property<string>("ShipVia")
                        .HasColumnType("nvarchar(MAX)")
                        .HasColumnName("shipvia");

                    b.Property<string>("ShippingPoint")
                        .HasColumnType("nvarchar(MAX)")
                        .HasColumnName("shippingpoint");

                    b.Property<bool?>("TaxIncluded")
                        .HasColumnType("bit")
                        .HasColumnName("taxincluded");

                    b.Property<short>("Terms")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("smallint")
                        .HasDefaultValue((short)0)
                        .HasColumnName("terms");

                    b.Property<string>("Till")
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasColumnName("till");

                    b.Property<DateTime>("TransDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("transdate")
                        .HasDefaultValueSql("GETUTCDATE()");

                    b.Property<int?>("WarehouseId")
                        .HasColumnType("int")
                        .HasColumnName("warehouse_id");

                    b.Property<string>("WayBill")
                        .HasColumnType("nvarchar(MAX)")
                        .HasColumnName("waybill");

                    b.HasIndex("CustomerId")
                        .HasDatabaseName("ar_customer_id_key");

                    b.HasIndex("EmployeeId")
                        .HasDatabaseName("ar_employee_id_key");

                    b.HasIndex("Id")
                        .HasDatabaseName("ar_id_key");

                    b.HasIndex("InvNumber")
                        .HasDatabaseName("ar_invnumber_key");

                    b.HasIndex("OrdNumber")
                        .HasDatabaseName("ar_ordnumber_key");

                    b.HasIndex("QuoNumber")
                        .HasDatabaseName("ar_quonumber_key");

                    b.HasIndex("TransDate")
                        .HasDatabaseName("ar_transdate_key");

                    b.ToTable("ar", (string)null);
                });

            modelBuilder.Entity("sql_ledger.Data.Model.Archive", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasDefaultValueSql("NEXT VALUE FOR archive_id");

                    b.Property<string>("FileName")
                        .HasColumnType("nvarchar(MAX)")
                        .HasColumnName("filename");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasColumnName("row_version");

                    b.HasKey("Id")
                        .HasName("archive_pkey");

                    b.ToTable("archive", (string)null);
                });

            modelBuilder.Entity("sql_ledger.Data.Model.ArchiveData", b =>
                {
                    b.Property<int?>("ArchiveId")
                        .IsRequired()
                        .HasColumnType("int")
                        .HasColumnName("archive_id");

                    b.Property<string>("Bt")
                        .HasColumnType("nvarchar(MAX)")
                        .HasColumnName("bt");

                    b.Property<int?>("Rn")
                        .HasColumnType("int")
                        .HasColumnName("rn");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasColumnName("row_version");

                    b.HasIndex("ArchiveId");

                    b.ToTable("archivedata", (string)null);
                });

            modelBuilder.Entity("sql_ledger.Data.Model.Assembly", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int")
                        .HasColumnName("id")
                        .HasDefaultValueSql("NEXT VALUE FOR assembly_id");

                    b.Property<bool?>("Adj")
                        .HasColumnType("bit")
                        .HasColumnName("adj");

                    b.Property<int?>("Aid")
                        .HasColumnType("int")
                        .HasColumnName("aid");

                    b.Property<bool?>("Bom")
                        .HasColumnType("bit")
                        .HasColumnName("bom");

                    b.Property<int?>("PartsId")
                        .HasColumnType("int")
                        .HasColumnName("parts_id");

                    b.Property<decimal?>("Qty")
                        .HasPrecision(28, 6)
                        .HasColumnType("decimal(28,6)")
                        .HasColumnName("qty");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasColumnName("row_version");

                    b.HasKey("Id")
                        .HasName("assembly_id_key");

                    b.ToTable("assembly", (string)null);
                });

            modelBuilder.Entity("sql_ledger.Data.Model.AuditTrail", b =>
                {
                    b.Property<string>("Action")
                        .HasColumnType("nvarchar(MAX)")
                        .HasColumnName("action");

                    b.Property<int?>("EmployeeId")
                        .HasColumnType("int")
                        .HasColumnName("employee_id");

                    b.Property<string>("FormName")
                        .HasColumnType("nvarchar(MAX)")
                        .HasColumnName("formname");

                    b.Property<string>("Reference")
                        .HasColumnType("nvarchar(MAX)")
                        .HasColumnName("reference");

                    b.Property<byte[]>("RowVersion")
                        .IsConcurrencyToken()
                        .ValueGeneratedOnAddOrUpdate()
                        .HasColumnType("rowversion")
                        .HasColumnName("row_version");

                    b.Property<string>("TableName")
                        .HasColumnType("nvarchar(MAX)")
                        .HasColumnName("tablename");

                    b.Property<DateTime>("TransDate")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime2")
                        .HasColumnName("transdate")
                        .HasDefaultValueSql("CAST(GETUTCDATE() AS Date)");

                    b.Property<int?>("TransId")
                        .HasColumnType("int")
                        .HasColumnName("trans_id");

                    b.HasIndex("TransId")
                        .HasDatabaseName("audittrail_trans_id_key");

                    b.ToTable("audittrail", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("sql_ledger.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("sql_ledger.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("sql_ledger.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("sql_ledger.Data.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("sql_ledger.Data.Model.ArchiveData", b =>
                {
                    b.HasOne("sql_ledger.Data.Model.Archive", "Archive")
                        .WithMany()
                        .HasForeignKey("ArchiveId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired()
                        .HasConstraintName("archivedata_archive_id_fkey");

                    b.Navigation("Archive");
                });
#pragma warning restore 612, 618
        }
    }
}
